1. kubectl config set-context --current --namespace=<namespace-na
2. kubectl config view
3. docker run --cap-add MAC_ADMIN ubuntu -> add privileges
3. docker run --cap-drop KILL ubuntu -> drop privileges
4. docker run --privileged ubuntu -> run with all privileges
    **Settings on container will override with that on pod
5. Service Account: account used by machine (like Jenkins): kubectl create serviceaccount dashboard-sa
    a. token for account is created and stored in secrets
    b. token can be used to make rest call to kube api using curl ->  --header "Authorization: Bearer <token>"
        or copy it to your jenkins dashboard to authenticate it
    c. if the jenkins is hosted inside the cluster, you can simply take token from volumes
    d. an account with name: default exists
    e. with version 1.24 tokens are not auto generated. Run command: kubectl create token dashboard-sa
    f. Set service account after updating deployment.yml kubectl set serviceaccount deploy/web-dashboard dashboard-sa
6. CPU: Req but no Limit is ideal scenario
7. Taints and Tolerance:
    kubectl taint node node-name key=value:NoSchedule
    effects:
        a. NoSchedule
        b. PreferNoSchedule
        c. NoExecute: existing pods will be evacuated
8. Labelling nodes: kubectl label nodes node1 size=large
9. kubectl exec -it <pod-name> cat /app/app.log
10. kubectl get pods --selector env=dev
    kubectl get pods --selector env=dev,bu=finance
11. kubectl rollout status deployment/<name>
    kubectl rollout history deployment/<name>
    kubectl rollout undo deployment/<name>
    kubectl set image deployment nginx nginx=nginx:1.17 --record
    kubectl rollout history deployment nginx --revision=3
12. kubectl config view
    kubectl config --kubeconfig=<path-to-file> use-context <name>
13. kubectl auth can-i create deployments
    kubectl auth can-i create deployments --as dev-user
    kubectl auth can-i create deployments --as dev-user --namespace test